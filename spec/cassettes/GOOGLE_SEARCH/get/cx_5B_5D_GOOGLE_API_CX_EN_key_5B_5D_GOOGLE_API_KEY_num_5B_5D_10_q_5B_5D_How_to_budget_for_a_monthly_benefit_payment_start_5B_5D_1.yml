---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?cx=<GOOGLE_API_CX_EN>&key=<GOOGLE_API_KEY>&num=10&q=How%20to%20budget%20for%20a%20monthly%20benefit%20payment&start=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mas-Responsive/1.0 (Jon-Gilbraith-00224.local; jongilbraith; 83494) ruby/2.2.5
        (319; x86_64-darwin15)
      X-Request-Id:
      - a22adb84-41f4-47f6-b30a-3d4cd149f9fd
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Tue, 20 Dec 2016 14:01:04 GMT
      Date:
      - Tue, 20 Dec 2016 14:01:04 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/bLIobh6aiHtWTguITdLYLjMHLoU"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '29726'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 20 Dec 2016 14:01:05 GMT
recorded_with: VCR 3.0.3
